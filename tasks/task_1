Оновная задача спринта: 

Реализация сервиса авторизации.

Требуемая функциональность:
1. Регистрация пользователя.
2. Login пользователя с использованием (jwt + refresh token).
3. Обновление jwt token по refresh token.
4. logout пользователя + * logout со всех устройств.
5. Изменение личных данных (без подтверждений).
6. Получение пользователем истории данных.
7. Внедрение авторизации в AsyncAPI.
8. Ограничение количеств запросов пользователей по алгоритму Token bucket.
9. Хранение чувствительных данных хэшем с динамическим соление хешей PBKDF2
10. Ограничение попыток входа.
11. Postgres партиционирование истории входов

Технологический стек:

1. Фреймворк приложения: Flask + gevent (реализация асинхронности в синхронном flask)
2. USGI: gunicorn
3. БД postgres
4. Redis

Принцип авторизации:
jwt + refresh token + 2 factor auth

Хранение данных в хеше 

Документация:

 1. OpenAPI
 
 
Как обрабатывать не авторизован, при наличии refresh token

Разлогин - протухание refresh token

Двухфакторная авторизация - session_id в промежутке после ввода пароля